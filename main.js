const Bot = require("node-telegram-bot-api");
const db = require("./db");
const Nodemailer = require("nodemailer");


const token = "5946888409:AAEmPbBvsoBEf-IWALp3iBWaThjS33G7aJQ";
const appointmentURL = "https://famous-sfogliatella-4b46e3.netlify.app/";
const reviewURL = "https://polite-lokum-847fef.netlify.app/";

const sticker = "https://tlgrm.ru/_/stickers/d43/740/d4374010-6842-3710-b8f0-115b0c414216/1.webp";

const bot = new Bot(token, {polling: true});


function start() {
    bot.on('message', async (msg) => {
        const chatID = msg.chat.id;

        if (msg.text === "/start") {
            sendStartMessage(chatID);
        }

        if (msg.text === "–ú–µ–Ω—é") {
            sendMenu(chatID);
        }

        if (msg.text === "/sendAll") {
            sendAllDiscounts(chatID);
        }

        if (msg?.web_app_data?.data) {
            const receivedData = JSON.parse(msg.web_app_data.data);
            if (receivedData.type === "–ó–∞–ø–∏—Å—å") {
                await bot.sendMessage(chatID, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É.\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!");
                await sendMail("–ó–∞–ø–∏—Å—å", receivedData.name, receivedData.phone, receivedData.comment);
            } else if (receivedData.type === "–û—Ç–∑—ã–≤") {
                await bot.sendMessage(chatID, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤.");
                await sendMail("–û—Ç–∑—ã–≤", receivedData.name, receivedData.review);
            }
        }
    })

    bot.on('callback_query', async (msg) => {
        chatID = msg.message.chat.id;

        if (msg.data === "approve") {
            await sendMenu(chatID);
            await bot.sendMessage(chatID, "–î–ª—è –æ—Ñ–æ—Ä–ª–º–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–∏–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' —Å–Ω–∏–∑—É.", createReplyKeyboard(
                [[{text: "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", web_app: {url: appointmentURL}}],
                    [{text: "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", web_app: {url: reviewURL}}],
                    ["–ú–µ–Ω—é"]]));
            addUser(msg);
        }

        if (msg.data === "doctors") {
            sendDoctors(chatID);
        }

        if (msg.data === "schedule") {
            sendSchedule(chatID);
        }

        if (msg.data === "prices") {
            sendType(chatID);
        }

        if (msg.data.match(/type/)) {
            sendPrice(chatID, msg.data.slice(4));
        }

        if (msg.data === "discounts") {
            sendDiscounts(chatID);
        }

        if (msg.data === "review") {
            getReview(chatID);
        }

        if (msg.data === "info") {
            sendInfo(chatID);
        }
    })
}

function createInlineKeyboard(...args) {
    return ({
        reply_markup: {
            inline_keyboard: args[0]
        },
    });
}

function createReplyKeyboard(...args) {
    return ({
        reply_markup: {
            keyboard: args[0],
            resize_keyboard: true,
        },
    });
}

async function sendStartMessage(chatID) {
    await bot.sendSticker(chatID, sticker);
    await bot.sendMessage(chatID, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ —á–∞—Ç-–±–æ—Ç–µ –∞–≤—Ç–æ—Ä—Å–∫–æ–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ –ú–ï–õ\n");
    await bot.sendMessage(chatID, `–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç-–±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å –í–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.`, createInlineKeyboard([[{text: "–°–æ–≥–ª–∞—Å–µ–Ω", callback_data: "approve"}]]));
}

async function sendMenu(chatID) {
    bot.sendMessage(chatID, `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é`, createInlineKeyboard([
        [{text: "–ù–∞—à–∏ –≤—Ä–∞—á–∏", callback_data: "doctors"}],
        [{text: "–¶–µ–Ω—ã", callback_data: "prices"}],
        [{text: "–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏", callback_data: "discounts"}],
        [{text: "–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data: "info"}]])
    );
}

async function sendDoctors(chatID) {
    let doctorsArray = [];
    await db.client.query("SELECT * FROM doctors", (err, res) => {
        if (err) console.log(err);
        for (let value of res.rows) {
            doctorsArray.push(`${value.name} - ${value.description}`);
        }

        bot.sendMessage(chatID, doctorsArray.join("\n\n"));
    })
}

async function sendType(chatID) {
    let typesArray = [];
    await db.client.query("SELECT * FROM types", (err, res) => {
        if (err) console.log(err);
        for (let value of res.rows) {
            typesArray.push([{text: value.type, callback_data: `type${value.type}`}]);
        }

        bot.sendMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", createInlineKeyboard(typesArray))
    })
}

async function sendPrice(chatID, type) {
    let string = `ü¶∑${type}\n`;
    await db.client.query("SELECT title, price FROM prices WHERE type = $1", [type], (err, res) => {
        if (err) console.log(err);
        for (let value of res.rows) {
            string += `${value.title} - ${value.price}‚ÇΩ\n`;
        }

        bot.sendMessage(chatID, string);
    })
}

async function sendDiscounts(chatID) {
    await db.client.query("SELECT title, description FROM discounts", (err, res) => {
        if (err) console.log(err);
        if (res.rows.length === 0) bot.sendMessage(chatID, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫–∞–∫–∏—Ö –∞–∫—Ü–∏–π –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è");
        for (let value of res.rows) {
            bot.sendMessage(chatID, `${value.title} - ${value.description}`);
        }
    })
}

async function sendInfo(chatID) {
    bot.sendMessage(chatID, "üìû–ö–æ–Ω—Ç–∞–∫—Ç—ã\n+7(4212)46-09-40\n+7(914)410-42-42\n\nüåê–í–µ–±-—Å–∞–π—Ç\nhttp://melstom.ru/\n\nüì©–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\nmelclinic@hotmail.com\n\nüìç–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É\n–≥.–•–∞–±–∞—Ä–æ–≤—Å–∫, –í–æ—Å—Ç–æ—á–Ω–æ–µ —à–æ—Å—Å–µ, 41, –ø—Ä–∞–≤–∞—è –±–∞—à–Ω—è (–ø—Ä–∞–≤—ã–π –≤—Ö–æ–¥) 2 —ç—Ç–∞–∂\nhttps://go.2gis.com/w62d6em\n\nüïõ–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:\n–±—É–¥–Ω–∏ ‚Äî —Å 9:00 –¥–æ 19:00\n—Å—É–±–±–æ—Ç–∞ ‚Äî —Å 9:00 –¥–æ 16:00\n–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –≤—ã—Ö–æ–¥–Ω–æ–π");
}

async function addUser(msg) {
    const chatid = msg.message.chat.id;
    const firstname = msg.from.first_name || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ";
    const lastname = msg.from.last_name || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ";

    await db.client.query("SELECT * FROM users WHERE chatid = $1", [chatid], (err, res) => {
        if (err) console.log(err);
        if (res.rows.length === 0) {
            db.client.query("INSERT INTO users (chatid, role, firstname, lastname) VALUES ($1, $2, $3, $4)", [chatid, "user", firstname, lastname], (err, res) => {
                if (err) console.log(err);
            })
        }
    })
}

async function sendAllDiscounts(chatID) {
    await db.client.query("SELECT role FROM users WHERE chatid = $1", [chatID], (err, res) => {
        if (err) console.log(err);
        if (res.rows[0].role === "admin") {
            bot.sendMessage(chatID, "–ê–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
            db.client.query("SELECT chatid FROM users WHERE role = $1", ["user"], (err, res) => {
                if (err) console.log(err);
                for (let value of res.rows) {
                    sendDiscounts(value.chatid);
                }
            })
        }
    })
}

async function sendMail(type, ...args) {
    let transporter = Nodemailer.createTransport({
        host: "smtp.gmail.com",
        post: 465,
        secure: true,
        auth: {
            user: "zhuravlevdv2004@gmail.com",
            pass: "kxqhctlbhgixyfex"
        }
    });

    if (type === "–ó–∞–ø–∏—Å—å") {
        let [name, phone, comment] = args;
        let info = await transporter.sendMail({
            from: "TELEGRAM BOT <zhuravlevdv2004@gmail.com>",
            to: "zhuravleffdanilka2004@mail.ru",
            subject: '–∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º',
            text: `–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞: ${name}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞: ${phone}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`
        });
        console.log('message is sent', info.messageId);

    } else if (type === "–û—Ç–∑—ã–≤") {
        let [name, comment] = args;
        let info = await transporter.sendMail({
            from: "TELEGRAM BOT <zhuravlevdv2004@gmail.com>",
            to: "zhuravleffdanilka2004@mail.ru",
            subject: '–æ—Ç–∑—ã–≤',
            text: `–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞: ${name}\n–û—Ç–∑—ã–≤: ${comment}`
        });
        console.log('message is sent', info.messageId);
    }
}


start();


